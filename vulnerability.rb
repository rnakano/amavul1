require 'rexml/document'
require 'rubygems'
require 'open-uri'
require 'zlib'
require 'stringio'

class Fetcher
  MIRROR_LIST = "http://repo.us-west-2.amazonaws.com/2018.03/updates/x86_64/mirror.list"
  
  def download_updateinfo
    mirror = open(MIRROR_LIST) do |f|
      f.gets.chomp
    end
    
    repo_url = mirror + "/repodata/repomd.xml"
    repo = open(repo_url) do |f|
      REXML::Document.new(f.read)
    end

    entries = []
    repo.elements.each("repomd/data") do |data|
      entries << data
    end
    data_entry = entries.find do |data|
      data["type"] == "updateinfo"
    end
    location = data_entry.elements["location"]["href"]
    updateinfo_url = mirror + "/" + location

    open(updateinfo_url) do |f|
      gz = Zlib::GzipReader.new(f)
      gz.read
    end
  end
end

class Vulnerability
  @vuls = {}
  
  def self.add(severity, desc, name, version, release)
    arr = @vuls[name]
    arr = [] unless arr

    arr << { severity: severity, desc: desc, name: name, version: version + "-" + release }
    @vuls[name] = arr
  end

  def self.search(name, version)
    arr = @vuls[name]
    return false unless arr

    vuls = arr.select do |vul|
      compare_version(vul[:version], version)
    end

    return false if vuls.empty?

    return vuls
  end

  def self.compare_version(v1, v2)
    Gem::Version.new(v1) > Gem::Version.new(v2)
  end
end

update_info = Fetcher.new.download_updateinfo
doc = REXML::Document.new(update_info)

doc.elements.each('updates/update') do |item|
  severity = item.elements["severity"].text
  desc = item.elements["description"].text
  
  item.elements.each("pkglist/collection/package") do |package|
    name = package["name"]
    version = package["version"]
    arch = package["arch"]
    release = package["release"]
    
    Vulnerability.add(severity, desc, name, version, release) if arch == "x86_64"
  end
end

found = 0
lines = 0

while line = gets
  line.chomp!
  lines += 1
  
  name, version = line.split(" ")

  vuls = Vulnerability.search(name, version)
  if vuls
    vuls.each do |v|
      puts "----" * 15
      puts "<<" + v[:severity] + ">>"
      puts "affected package:  " + v[:name]
      puts "new version:  " + v[:version]
      puts "installed version: " + version
      puts ""
      puts v[:desc]
      found += 1
    end
  end
end

if lines == 0
  $stderr.puts "Error: Stdin is empty. If you run in docker, add `-i` option into `docker run`"
  exit 1
end

puts "====" * 15
if found > 0
  puts "Summary: Found #{ found } vulnerabilities."
  exit 1
else
  puts "Summary: OK. No vulnerabilities."
  exit 0
end
